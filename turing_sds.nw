\documentclass[11pt]{article}

% \documentclass[twocolumn,12pt]{article}
\usepackage{hyperref}
\usepackage{noweb}
\usepackage{graphicx}
\noweboptions{longxref,alphasubpage,subscriptidents,subscriptquotedidents,longchunks}

% % Set up formatting to look more like a modern report than an old book.
\setlength{\parindent}{0em}
\setlength{\parskip}{1em}

% Default Geometry
\usepackage[a4paper,bottom=1in]{geometry}
% \usepackage[margin=0.5in, paperwidth=14.15in, paperheight=11.25in]{geometry} % 1280 x 1024 Monitor reading
% \usepackage[margin=0.5in, paperwidth=16.5in, paperheight=9.25in]{geometry} % 1600 x 900 Monitor reading (ThinkPad)
% \usepackage[margin=0.5in, paperwidth=19.9in, paperheight=11.1in]{geometry} % 1920 x 1080 Monitor reading (MultiSync EA234WMi)
% \usepackage[margin=0.5in, paperheight=19.9in, paperwidth=11.1in]{geometry} % 1080 x 1920 Monitor reading (Portrait MultiSync EA234WMi)
\usepackage{microtype}
\usepackage[UKenglish]{isodate}% http://ctan.org/pkg/isodate
\cleanlookdateon% Remove ordinal day reference

\setlength{\columnsep}{1in}
\setlength{\columnseprule}{1px}

\newcommand{\vref}[1]{\ref{#1},~p.\pageref{#1}}

\usepackage{booktabs}
\usepackage{tikz}
\usetikzlibrary{shapes.geometric, arrows}

\title{A Turing Complete SDS}
\author{Andrew Owen Martin}

\pagestyle{noweb}

\begin{document}
\maketitle
\tableofcontents

\section{Introduction}

Run the code for the Multi-swarm solution with [[make code && python multi_swarm_solution.py]] and for the Two Agent solution with [[make code && python run_two_agent_solution.py]].

\section{Preliminary assumptions}

To go from something like NORMA2 to a new swarmy implementation, we need to know what things we can and cannot change.

Firstly, when designing a NORMA2 program, to perform addition for example, then an intelligent user still needs to determine the procedure themselves. This means we can get away with manually specifying the shape of the program, and should not expect the intended function to emerge without such careful initialisation. Because of this, I will often refer to the state table which defines a NORMA2 machine for addition (Table~\ref{tab:add}); in a properly swarmy system, there will not be an explicit state table, but the emergent behaviour will have to be similar to one, and this will largely have to be the result of manual configuration by a user.

\begin{table}
	\centering
	\begin{tabular}{@{}rlcc@{}}
		State & Action & if $x=0$ goto & if $x>0$ goto
		\\\midrule
		1 & Init & 4 & 2 \\
		2 & DEC $x$ & 3 & 3 \\
		3 & INC $y$ & 4 & 2 \\
		4 & Halt & 4 & 4\\
	\end{tabular}
\caption{Norma addition truth table}
\label{tab:add}
\end{table}

Secondly, NORMA2 was given some registers of unlimited size which is fine in practise, but if I were to implement NORMA2, in Python for example, then I would need to include special routines for times when the value of the registers was larger than could fit into memory. This could be a function which stops the NORMA2 procedure before the register values become too big, and informs the user to go and install more memory into the machine. The point is, that any implementation I can do in a few minutes would not be able to perform certain computations over a certain size. I therefore suggest that we should not expect the swarmy implementation to work for all cases either, though in theory it should.

Lastly, the capabilities of NORMA are incrementing, decrementing, branching, and comparison with zero. We will need either the same set of capabilities, or a similarly expressive set.

With these assumptions in mind, lets consider a few approaches.

\section{Just copy NORMA2}

If I implemented something exactly like NORMA2, then we know for sure that it would work, but we would be criticised for demonstrating something that is neither original or swarmy. So from this basis, what's the minimum change we could do to make a system that would still work, by virtue of its being almost identical to NORMA2, but with some swarmy aspect?

Imagine a swarm of one agent, where their behaviour was entirely determined by the state table. The agent would maintain a state and two register values, and update them according to the states. Again, this would definitely work, but not be sufficciently swarmy, as there is no agent-to-agent interaction, and the behaviour of the agent is explicit and complicated.

So we need more than one agent, is there any way that two agents could be used? Maybe if one agent simply maintained a boolean state depending on whether it held that $x=0$. Then you could have one agent maintaining the registers and state, and branching depending on the state of the other agent. This could also certainly be made to work, but now we have the criticism that the two distinct types of agent makes this more of a multi-agent system rather than a swarm intelligence system.

So could it be done with two identical agents? One would need to maintain a state and the other would have to find the next state. The agent which found the next state would have to deactivate the other agent so the newly inactive agent may find the next state. They would go on leap-frogging each other. Let's see if that's at all viable.

\subsection{Two agent solution}

First we'll import some bits, and define an Agent as something which has an activity and a hypothesis, and a `Step' which defines a state of a computational procedure, representing the value of the X and Y registers and the current state it is in.

<<two-agent-solution.py>>=
import random
from collections import namedtuple

Step = namedtuple('Step',['x','y','state'])

class Agent:
	def __init__(self):
		self.active = False
		self.hyp = None
@

Then we'll define a swarm as two of those agents, and define the function for generating new hypothesis, which in this case returns the initial Step, where $X=2$, $Y=1$, in State 1.

<<two-agent-solution.py>>=
swarm = tuple(Agent() for _ in range(2))

def initial_hyp():
	return Step(x=3,y=2,state=1)
@

Now we need a diffusion phase.
I've chosen to disallow self-selection, and use standard passive diffusion, and hypothesis transmission error, where the registers have a small chance of being perturbed and the state is chosen entirely random.

I previously had used context-sensitive to ensure both agents wouldn't remain active, but that event never occurs.
<<two-agent-solution.py>>=
def diffuse(swarm):
	for agent_num, agent in enumerate(swarm):

		# No self selection.
		# The polled agent is always the other agent.
		other_agent = swarm[(agent_num+1)%2]

		if not agent.active:

			if other_agent.active: # copy hyp noisily

				x, y, state = other_agent.hyp

				if random.random() < 0.3:

					x += random.choice([-1,1])

				if random.random() < 0.3:

					y += random.choice([-1,1])

				agent.hyp = Step(x, y, state=random.randint(1,4))

			else:

				agent.hyp = initial_hyp()
@

That all seems fairly safe, I should point out that the randomisation of state in the transmission error will be mitigated if each agent existed within a swarm that defined a single state. To clarify this, rather than a single homogeneous swarm, imagine a swarm of agents in each row of the state table, then each swarm would ``know'' what they were hypothesising as the next state.

But now I need to determine a test phase. It would require checking if the other agent is active and if so, that your hypothesis is a valid transition (see function ``[[is_valid]]'').
There also needs to be the extra feature that the agents remain active once they've become active, and the surpress the activity of the other agent.

<<two-agent-solution.py>>=
def test():

	for agent_num, agent in enumerate(swarm):

		# Active agents do nothing, and stay active
		if not agent.active:

			other_agent = swarm[(agent_num+1)%2]

			if other_agent.active:

				# Check if transition is valid.

				valid = is_valid(agent.hyp, other_agent.hyp)

				agent.active = valid

				if valid:

					other_agent.active = False

			else:

				# Both agents are inactive.
				# Go active if you have the initial state.
				# This only runs once.

				agent.active = agent.hyp == initial_hyp()
@

Here's the [[is_valid]] function, which implements the state table manually.

<<two-agent-solution.py>>=
def `is_valid(hyp, prev_hyp):

	other_x, other_y, other_state = prev_hyp

	x, y, state = hyp

	if other_state == 1:

		if other_x == 0:

			return x == other_x and y == other_y and state == 4

		else:

			return x == other_x and y == other_y and state == 2

	elif other_state == 2:

		return x == other_x-1 and y == other_y and state == 3

	elif other_state == 3:

		if other_x == 0:

			return x == other_x and y == other_y+1 and state == 4

		else:

			return x == other_x and y == other_y+1 and state == 2

	else: # other_state == 4:

		return False
@

Now to add a loop that does intialise, test, diffuse and halt. We'll halt when any active agent is in halt state 4.

<<two-agent-solution.py>>=
def run():
	# Initialise
	for agent in swarm:
		agent.hyp = initial_hyp()

	previously_active_agent = 1

	for iteration in range(1000):

		test()

		diffuse(swarm)

		# Print to console when the inactive agent becomes active.
		active_agent = [agent.active for agent in swarm].index(True)

		if False or not (active_agent == previously_active_agent):

			print(
				format(iteration,'4'),
				[(agent.hyp,agent.active) for agent in swarm],)

			previously_active_agent = active_agent

		# Halting.
		if any(agent.hyp.state == 4 for agent in swarm if agent.active):

			print(
				'Answer is',
				next(
					agent.hyp
					for agent
					in swarm
					if agent.active and agent.hyp.state == 4).y,
				'in',iteration,'iterations.')

			break
	else:

		print('no convergence')
@

Here's a script to run the two agent solution. It works, but there are some potentially problematic aspects to it.

<<run-two-agent-solution.py>>=
import two_agent_solution

two_agent_solution.run()
@

\subsection{Problems with the Two Agent solution}

\begin{enumerate}
\item The complex logic in the test for validation.
\item The fact that there are only two agents, there's nothing swarmy.
\item Only inactive agents perform the test phase.
\end{enumerate}

\section{Multiple agent solution}

The idea is to have one swarm for every state in the NORMA2 state table, plus two for every unique conditional branch destination.

Each swarm will also have a boolean convergence flag, which is initially false.

Initialisation could be achieved either by setting all the agents in the initial swarm to certain register values, and setting the convergence flag, or setting a single agent active with certain register values and waiting for convergence.
Agents in the initial swarm will be set active and given register values.

Any swarm which has not converged will be polling connected swarms and diffusing perturbed hypotheses, which it will test as valid by checking that a random agent from the previous swarm is converged and the registers make sense with the polled agents registers.

When a swarm has full activity it sets its convergence flag, inviting activity from the subsequent swarms, and surpresses all activity in previous swarms by switching off its convergence flag. Convergence flags therefore surpress processing.

\subsection{Implementation}

Let's start off with some imports.

<<multi-swarm-solution.py>>=
import random
import sds
from collections import namedtuple
import functools
import sys
import itertools
import json

XY = namedtuple('XY',['x','y'])

def agent_repr(self):
	if self.active:
		return "{h}".format(h=self.hypothesis)
	else:
		return "inactive"
sds.Agent.__repr__ = agent_repr
@

Now I'll define some swarms, right now I'll just initialise them, I'll link them up later, as its much easier to link an acyclic graph once all nodes have been created.

I'm also including a `converged' flag for each swarm, and rather than just having a raw boolean [['False']], I've made it a boolean in a list [['[False]']] so I can zip the list and have something I can modify in place.

At the end of this chunk `swarms' is a list of \mbox{(swarm name, agent list, converged flag)} tuples.

<<>>=
agent_count = 5
swarm_names = ('init','xgt0','decx','incy','xeq0','halt')
swarms = {
	swarm_name:	{
		'converged': False,
		'agents': [sds.Agent() for _ in range(agent_count)]
	}
	for swarm_name
	in swarm_names
}
@

Now initialise all the agent in the first swarm as active at the initial step.

This action has to be considered carefully as it must be the case that this swarm never converges again. Once the convergence flag is on, it will stop processing, once the flag goes off again, there must never be any activity, so activity can't just come from the microtests. I therefore suggest that each agent in the init swarm selects an agent in the init swarm.

<<>>=
for agent in swarms['init']['agents']:
	agent.hypothesis = XY(x=10,y=10)
	agent.active = True

swarms['init']['converged'] = True
@

\subsection{Multi swarm definitions}

I'll define everything manually, but afterwards I should be able to make a sexy functional programming solution.

This is for the init swarm.
<<>>=
def init_hyp(rng=random):
	#print('init hyp runs')
	return XY(x=1000,y=1000)

def init_test(hyp):
	#print('init test runs')
	polled_agent = random.choice(swarms['init']['agents'])
	#return polled_agent.hypothesis == XY(x=3,y=2)
	return polled_agent.active

@

Before doing any of the other functions, we have to have a function to probabilistically perturb a register.

<<>>=
def perturb(register): #PERTURB
	return register + random.choice((1,0,-1))
@

This is for `\(x > 0\)' swarm.

<<>>=
def xgt0_hyp(rng=random):
	for swarm_name in ('init','incy'):
		if swarms[swarm_name]['converged']:
			polled = rng.choice(swarms[swarm_name]['agents'])
			polled_x, polled_y = polled.hypothesis
			return XY(x=perturb(polled_x),y=perturb(polled_y))
	else:
		return XY(x=0,y=0)

def xgt0_test(hyp):
	for swarm_name in ('init','incy'):
		if swarms[swarm_name]['converged']:
			polled_agent = random.choice(swarms[swarm_name]['agents'])
			break
	else:
		return False
	if polled_agent.active:
		polled_x, polled_y = polled_agent.hypothesis
		return hyp.x == polled_x and hyp.y == polled_y and hyp.x > 0
	else:
		raise RuntimeError('inactive agent polled')
@

This is for `Decrement X' swarm.

<<>>=
def decx_hyp(rng=random):
	for swarm_name in ('xgt0',):
		if swarms[swarm_name]['converged']:
			polled = rng.choice(swarms[swarm_name]['agents'])
			polled_x, polled_y = polled.hypothesis
			return XY(x=perturb(polled_x),y=perturb(polled_y))
	else:
		return XY(x=0,y=0)

def decx_test(hyp):
	if swarms['xgt0']['converged']:
		polled_agent = random.choice(swarms['xgt0']['agents'])
		if polled_agent.active:
			polled_x, polled_y = polled_agent.hypothesis
			result = hyp.x == polled_x-1 and hyp.y == polled_y
			return result
		else:
			raise RuntimeError('inactive agent polled')
	else:
		print('dec x failed test as xgt0 is not converged')
		return False
@

This is for `Increment Y' swarm...
<<>>=
def incy_hyp(rng=random):
	for swarm_name in ('decx',):
		if swarms[swarm_name]['converged']:
			polled = rng.choice(swarms[swarm_name]['agents'])
			polled_x, polled_y = polled.hypothesis
			return XY(x=perturb(polled_x),y=perturb(polled_y))
	else:
		return XY(x=0,y=0)

def incy_test(hyp):
	if swarms['decx']['converged']:
		polled_agent = random.choice(swarms['decx']['agents'])
		if polled_agent.active:
			polled_x, polled_y = polled_agent.hypothesis
			result = hyp.x == polled_x and hyp.y == polled_y+1
			return result
		else:
			raise RuntimeError('inactive agent polled')
	else:
		print('incy failed test as decx is not converged')
		return False
@

This is for `\(x = 0\)' swarm.
<<>>=
def xeq0_hyp(rng=random):
	for swarm_name in ('init','incy'):
		if swarms[swarm_name]['converged']:
			polled = rng.choice(swarms[swarm_name]['agents'])
			polled_x, polled_y = polled.hypothesis
			return XY(x=perturb(polled_x),y=perturb(polled_y))
	else:
		return XY(x=0,y=0)

def xeq0_test(hyp):
	for swarm_name in ('init','incy'):
		if swarms[swarm_name]['converged']:
			polled_agent = random.choice(swarms[swarm_name]['agents'])
			break
	else:
		return False
	if polled_agent.active:
		polled_x, polled_y = polled_agent.hypothesis
		return hyp.x == polled_x and hyp.y == polled_y and hyp.x == 0
	else:
		raise RuntimeError('inactive agent polled')
@

This is for the halt swarm.
<<>>=
def halt_hyp(rng=random):
	for swarm_name in ('xeq0',):
		if swarms[swarm_name]['converged']:
			polled = rng.choice(swarms[swarm_name]['agents'])
			polled_x, polled_y = polled.hypothesis
			return XY(x=perturb(polled_x),y=perturb(polled_y))
	else:
		return XY(x=0,y=0)

def halt_test(hyp):
	for swarm_name in ('xeq0',):
		if swarms[swarm_name]['converged']:
			polled_agent = random.choice(swarms[swarm_name]['agents'])
			break
	else:
		return False
	if polled_agent.active:
		polled_x, polled_y = polled_agent.hypothesis
		return hyp.x == polled_x and hyp.y == polled_y
	else:
		raise RuntimeError('inactive agent polled')
@

Here's a data structure to keep it all together.
<<>>=
solution = [
	['init',swarms['init'],init_test,init_hyp,[]],
	['xgt0',swarms['xgt0'],xgt0_test,xgt0_hyp,['init','incy']],
	['decx',swarms['decx'],decx_test,decx_hyp,['xgt0']],
	['incy',swarms['incy'],incy_test,incy_hyp,['decx']],
	['xeq0',swarms['xeq0'],xeq0_test,xeq0_hyp,['init','incy']],
	['halt',swarms['halt'],halt_test,halt_hyp,['xeq0']],
]
@

\subsection{Multi-swarm execution}

<<>>=
def fully_active(swarm):
	result = all(x.active for x in swarm)
	return result

def iterate(solution):
	for swarm_name, swarm, microtest, hyp_function, previous_swarms in solution:
		if not swarm['converged']:
			#print('processing',swarm_name)
			# if swarm is not converged
			sds.run(
				swarm=swarm['agents'],
				microtests=[microtest],
				random_hypothesis_function=hyp_function,
				max_iterations=100,
				halting_function=fully_active,
				halting_iterations=10,
				report_iterations=None,
			)
			if not all(agent.active for agent in swarm['agents']):
				#raise RuntimeError('I thought it would all be active by now')
				#print(swarm_name,"didn't converge")
				pass
			else:
				swarm['converged'] = True
				print(swarm_name,'is now converged at',swarm['agents'][0].hypothesis)
				if swarm_name == 'halt':
					print('convergence in the halt swarm halts the process')
					return True
				for swarm_name, swarm, _, _, _ in solution:
					for prev_swarm_name in previous_swarms:
						if prev_swarm_name == swarm_name:
							if swarm['converged']:
								swarm['converged'] = False
								print(prev_swarm_name,'is no longer converged')
								for agent in swarm['agents']:
									agent.active = False
									agent.hypothesis = None

	#print('not halted yet')
	return False

def do_naive_multiswarm_solution():

	for num, swarm_name in enumerate(swarm_names,start=1):
		print(num, swarm_name, swarms[swarm_name])

	while True:
		if iterate(solution):
			print('halted properly')
			break

	print('done. Answer is',swarms['halt']['agents'][0].hypothesis.y)

#do_naive_multiswarm_solution()
@

\section{Multi swarm solution with functional programming}

I'll carry on editing the same file as there will be a lot of code sharing.

I need to make some 'intended action' functions to save me typing five different sets of logic.

<<>>=
def `decrementX(hyp):
	hyp_x, hyp_y = hyp
	return XY(hyp_x-1, hyp_y)

def `decrementY(hyp):
	hyp_x, hyp_y = hyp
	return XY(hyp_x, hyp_y-1)

def `incrementX(hyp):
	hyp_x, hyp_y = hyp
	return XY(hyp_x+1, hyp_y)

def `incrementY(hyp):
	hyp_x, hyp_y = hyp
	return XY(hyp_x, hyp_y+1)

def `noop(hyp):
	hyp_x, hyp_y = hyp
	return XY(hyp_x, hyp_y)

def `Xeq0(x):
	return x == 0

def `Xgt0(x):
	return x > 0

def `Xdontcare(x):
	return True
@

This is a function to make all the test function for all the swarms.

<<>>=
def `make_test_fun(swarms, linked_swarms,action,x_condition,rng=random):
	def generic_test_fun(
		swarms,
		previous_swarm_names,
		intended_action_function,
		x_condition_function,
		rng,
		hyp,
	):
		for swarm_name in previous_swarm_names:
			if swarms[swarm_name]['converged']:
				polled_agent = rng.choice(swarms[swarm_name]['agents'])
				break
		else:
			return False
		if polled_agent.active:
			polled_x, polled_y = intended_action_function(polled_agent.hypothesis)
			return (
				hyp.x == polled_x
				and hyp.y == polled_y
				and x_condition_function(hyp.x))
		else:
			raise RuntimeError('inactive agent polled')

	return functools.partial(
		generic_test_fun,
		swarms,
		linked_swarms,
		action,
		x_condition,
		rng,)

#foo = make_hyp_fun(linked_swarms=['init','incy'],action=noop,x_condition=Xgt0)
@

This is a function to make all the hyp functions for all the swarms.

<<>>=
def `make_hyp_fun(swarms, linked_swarms):
	def generic_hyp_fun(swarms, linked_swarms,rng=random):
		for swarm_name in linked_swarms:
			if swarms[swarm_name]['converged']:
				polled = rng.choice(swarms[swarm_name]['agents'])
				polled_x, polled_y = polled.hypothesis
				return XY(x=perturb(polled_x),y=perturb(polled_y))
		else:
			return XY(x=0,y=0)
	return functools.partial(generic_hyp_fun, swarms, linked_swarms)
@

Here's are the functions to make the building blocks.

<<>>=
swarm_types = {
	'init':(noop,Xdontcare),
	'xgt0':(noop,Xgt0),
	'xeq0':(noop,Xeq0),
	'incy':(incrementY,Xdontcare),
	'decy':(decrementY,Xdontcare),
	'incx':(incrementX,Xdontcare),
	'decx':(decrementX,Xdontcare),
	'halt':(noop,Xdontcare),
}
@

Which can be used with a state table.

<<>>=
state_table = [
	('A-init','init',['A-init']),
	('B-xgt0','xgt0',['A-init','D-incy']),
	('C-decx','decx',['B-xgt0']),
	('D-incy','incy',['C-decx']),
	('E-xeq0','xeq0',['A-init','D-incy']),
	('halt','halt',['E-xeq0']),
]
@

Now let's try to build a multi swarm solution from the table.

<<>>=
def `build_solution(state_table,initial_x,initial_y):
	swarms = {
		name: {
			'converged': False,
			'agents': [sds.Agent() for _ in range(agent_count)]
		}
		for name, swarm_type, linked_swarms in state_table
	}

	solution = []

	for name, swarm_type, linked_swarms in state_table:

		if swarm_type == 'init':
			swarm = swarms[name]
			for agent in swarm['agents']:
				agent.hypothesis = XY(x=initial_x,y=initial_y)
				agent.active = True
			swarm['converged'] = True

		action, x_condition = swarm_types[swarm_type]

		test_fun = make_test_fun(swarms, linked_swarms,action,x_condition,random)
		hyp_fun = make_hyp_fun(swarms, linked_swarms)

		solution.append((name,swarms[name],test_fun, hyp_fun, linked_swarms))

	return solution
@

<<>>=
def do_functional_multiswarm_solution():

	functional_solution = build_solution(state_table,initial_x=1000,initial_y=1000)

	while True:
		if iterate(functional_solution):
			break

	_,halt_swarm,_,_,_ = next(x for x in functional_solution if x[0] == 'halt')
	answer = halt_swarm['agents'][0].hypothesis.y
	print('Answer is',answer)
	#print('done. Answer is',['halt']['agents'][0].hypothesis.y)

#do_functional_multiswarm_solution()
@

\clearpage{}
\section{Quorum sensing}

The previous multi swarm version relied on a flag for each swarm which determined whether or not it was executing.
We now hope to replace that flag, with a two-phase behaviour of agents, which implement the effect of the flag once they determine their swarm has converged.

So agents are either (i) polling the previous swarm to check whether their registers are correct, or (ii) remain active, while polling the previous swarm to suppress activity there.

So each agent needs to maintain an internal variable, which is used for quorum sensing.

Here's my take on Bish's pseudocode.
<<quorum test phase>>=
if agent.quorum_count > quorum_threshold:

	inhibit_mode(linked_swarms)

else:

	polled = random.choice(swarm)

	if (
		polled.quorum_count > quorum_threshold
		and check_registers(agent.hyp, polled.hyp)
	):

		agent.quorum_count += 1

	else:

		agent.quorum_count = 0
@

<<quorum inhibit mode>>=
def inhibit_mode(linked_swarms):
	random_swarm = random.choice(linked_swarms)

	polled = random.choice(swarm)

	polled.quorum_count = 0
@

<<quorum diffusion phase>>=
if agent.quorum_count == 0:

	polled = random.choice(swarm)

	if polled.quorum_count > 0:

		agent.hyp = polled.hyp

	else:

		new_hyp()
@


\subsection{Quorum test function}
<<multi-swarm-solution.py>>=
def `quorum_test_phase(
	swarm,
	linked_swarms,
	quorum_threshold,
	swarm_test_function,
	rng=random
):
	for agent_num, agent in enumerate(swarm):

		random_swarm = random.choice(linked_swarms)

		polled = random.choice(random_swarm)

		if polled.active >= quorum_threshold:

			if swarm_test_function(agent, polled):

				agent.active += 1

			else:

				agent.active = 0
@

\subsection{Quorum microtest}

Consider making it so the other agent is passed in, not polled in this function.

This used to make agents go inactive if they polled an inactive agent in a linked/previous swarm. [[
if (
	(polled.active < quorum_threshold)
	or registers_not_right
):
	return 0
else:
	return agent.active + 1
]]but this means that any swarm polling from two swarms will go inactive half the time.

This function can do with a big cleanup, it probably should just be doing registers checking.
It looks a bit complicated, but it saves me writing a `registers are ok' function for each swarm.
\clearpage{}
<<multi-swarm-solution.py>>=
def `quorum_make_test_fun(
	swarms,
	linked_swarm_names,
	action,
	x_condition,
	quorum_threshold,
	rng=random,
):

	def quorum_generic_test_fun(
		linked_swarms,
		intended_action_function,
		x_condition,
		quorum_threshold,
		rng,
		agent,
		polled,
	):
		next_x, next_y = intended_action_function(polled.hypothesis)

		hyp = agent.hypothesis

		# return True if registers are good. False otherwise.
		return (hyp.x == next_x and hyp.y == next_y and x_condition(hyp.x))

	linked_swarms = [
		swarms[swarm_name]
		for swarm_name
		in linked_swarm_names]

	return functools.partial(
		quorum_generic_test_fun,
		linked_swarms,
		action,
		x_condition,
		quorum_threshold,
		rng,)

@

\subsection{Quorum new hypothesis}
<<>>=
def `quorum_make_hyp_fun(swarms, linked_swarm_names):

	def quorum_generic_hyp_fun(linked_swarms, rng=random):

		random_swarm = rng.choice(linked_swarms)

		polled = rng.choice(random_swarm)

		polled_x, polled_y = polled.hypothesis

		return XY(x=perturb(polled_x),y=perturb(polled_y))

	linked_swarms = [
		swarms[swarm_name]
		for swarm_name
		in linked_swarm_names]

	return functools.partial(quorum_generic_hyp_fun, linked_swarms)
@


\subsection{Quorum build new solution}
<<>>=
def `quorum_build_solution(
	state_table,
	initial_x,
	initial_y,
	agent_count,
	quorum_threshold,):

	swarms = {
		name:[sds.Agent() for _ in range(agent_count)]
		for name,_,_ in state_table
	}

	for name, swarm_type, linked_swarms in state_table:

		if swarm_type == 'init':

			for agent in swarms[name]:

				agent.hypothesis = XY(x=initial_x,y=initial_y)

				agent.active = quorum_threshold

		else:

			for agent in swarms[name]:

				agent.active = 0

				agent.hypothesis = XY(x=0,y=0)

	solution = []

	for swarm_name, swarm_type, linked_swarm_names in state_table:

		action, x_condition = swarm_types[swarm_type]

		test_fun = quorum_make_test_fun(
			swarms,
			linked_swarm_names,
			action,
			x_condition,
			quorum_threshold,)

		hyp_function = quorum_make_hyp_fun(swarms, linked_swarm_names)

		previous_swarms = [
			swarms[name]
			for name
			in linked_swarm_names]

		swarm_solution = (
			swarm_name,
			swarms[swarm_name],
			test_fun,
			hyp_function,
			previous_swarms)

		solution.append(swarm_solution)

	return solution
@

\subsection{Quorum iterate}
At this point, `microtest' is a function which takes an agent and returns whether a random linked agent is blahhh.
<<>>=
def `quorum_iterate(solution, quorum_threshold):

	for swarm_name, swarm, microtest, hyp_function, previous_swarms in solution:

		for agent_num, agent in enumerate(swarm):


			if agent.active == 0:

				local_polled = random.choice(swarm)

				if local_polled.active > 0:

					agent.hypothesis = local_polled.hypothesis

				else:

					agent.hypothesis = hyp_function(random)

			elif agent.active >= quorum_threshold:

				random_linked_swarm = random.choice(previous_swarms)

				linked_polled = random.choice(random_linked_swarm)

				linked_polled.active = 0

		#test
		quorum_test_phase(
			swarm,
			previous_swarms,
			quorum_threshold,
			microtest,
			random,)

	# Halting condition
	halt_swarm = next(swarm for name,swarm,_,_,_ in solution if name == 'halt')

	# Halt if there are any quorate agents in the halt swarm
	return any(x.active >= quorum_threshold for x in halt_swarm)
@

\subsection{Quorum execute}
<<multi-swarm-solution.py>>=
def `report_swarms(solution):
	return tuple(
		(
			name,tuple((agent.hypothesis, agent.active)
			for agent
			in swarm)
		)
		for name,swarm,_,_,_
		in solution
	)

# (('A-init', ((XY(x=3, y=2), 0), (XY(x=3, y=2), 0), (XY(x=3, y=2), 0), (XY(x=3, y=2), 0), (XY(x=3, y=2), 0))), ('B-xgt0', ((XY(x=0, y=5), 0), (XY(x=4, y=2), 0), (XY(x=3, y=1), 0), (XY(x=2, y=3), 0), (XY(x=2, y=1), 0))), ('C-decx', ((XY(x=4, y=3), 0), (XY(x=4, y=2), 0), (XY(x=1, y=2), 0), (XY(x=3, y=3), 0), (XY(x=1, y=2), 0))), ('D-incy', ((XY(x=4, y=3), 0), (XY(x=3, y=1), 0), (XY(x=0, y=5), 0), (XY(x=0, y=5), 0), (XY(x=4, y=4), 0))), ('E-xeq0', ((XY(x=0, y=5), 1), (XY(x=0, y=5), 2), (XY(x=0, y=5), 3), (XY(x=0, y=5), 3), (XY(x=0, y=5), 3))), ('halt', ((XY(x=0, y=5), 2), (XY(x=0, y=5), 3), (XY(x=0, y=5), 1), (XY(x=0, y=5), 2), (XY(x=0, y=5), 1))))


def `solution_to_json(solution):
	return tuple(
		(name,
		tuple(
			(agent.hypothesis.x, agent.hypothesis.y, agent.active)
			for agent
			in swarm
		))
		for name,swarm,_,_,_
		in solution
	)


def `do_quorum_sensing_solution(quorum_threshold,initial_x=3,initial_y=2,max_iterations=None):

	if max_iterations is None:
		repeat_generator = itertools.count()
	else:
		repeat_generator = range(max_iterations)

	solution = quorum_build_solution(
		state_table,
		initial_x=initial_x,
		initial_y=initial_y,
		agent_count=5,
		quorum_threshold=quorum_threshold,)

	iteration_states = []

	for repeat in repeat_generator:

		iteration_states.append(solution_to_json(solution))

		if quorum_iterate(solution[1:], quorum_threshold):

			halt_swarm = next(
				swarm
				for name,swarm,_,_,_
				in solution
				if name == 'halt')

			print('Finished at iteration {r}. Answer is {a}.'.format(
				r=repeat,
				a=next(
					agent 
					for agent
					in halt_swarm
					if agent.active >= quorum_threshold
				).hypothesis.y
			))

			break

	print(report_swarms(solution))
	print(solution_to_json(solution))

	return iteration_states

def get_anim(x,y,quorum_threshold):
	animation = do_quorum_sensing_solution(quorum_threshold, x, y,max_iterations=None)
	return animation

if __name__ == "__main__":
	animations = []
	for animation_count in range(20):
		animation = do_quorum_sensing_solution(
			initial_x=100,
			initial_y=100,
			quorum_threshold=3,)
		animations.append((animation_count,animation))

	with open('multi-swarm-animation.json','w') as f:
		for animation in animations:
			f.write(json.dumps(animation))
			f.write("\n")
		#json.dump(animations,f)
@

\subsection{OLD Quorum summary pseudocode}
<<pseudo quorum sensing>>=
Do until an agent in the halt swarm hits quorum

	For each swarm

		For each agent # Diffusion phase

			if agent's quorum count is 0 # polling is inactive

				poll an agent from the same swarm

				if polled agent's quorum count > 0

					polling agent copies hypothesis from polled agent

				else

					polling agent generates random hypothesis by polling a
					random agent from a random linked swarm and copying the
					hypothesis with peturbation.

		For each agent # Test phase

			poll an agent from a linked swarm

			if polling agent has not hit quorum threshold

				if polled agent has hit quorum threshold

					if polling agent's registers are accurate

						agent increments quorum count

					else

						agent sets quorum count to zero

				else

					do nothing

			else:

				polled agent's quorum count becomes zero
@

\subsection{Quorum summary pseudocode}
<<pseudo quorum sensing 2>>=
Do until an agent in the halt swarm hits quorum

	For each agent in swarm # Diffusion phase

		remotely poll and agent from a random linked swarm

		if agent's quorum count is 0 # polling is inactive

			locally poll an agent from the same swarm

			if local_polled agent's quorum count > 0 # local_polled is active

				agent copies hypothesis from local_polled agent

			else

				agent generates random hypothesis by copying the
				hypothesis, with peturbation, of remotely polled agent.

		else if agent has hit quorum threshold

			remotely polled agent's quorum count becomes zero

	For each agent in swarm # Test phase

		remotely poll a random agent from a random linked swarm

		if remotely polled agent has hit quorum threshold

			if agent's registers are accurate

				agent increments quorum count

			else

				agent sets quorum count to zero
@


\appendix{}

\section{Index}

\nowebindex{}

\section{Code Chunks}

\nowebchunks{}

\end{document}
